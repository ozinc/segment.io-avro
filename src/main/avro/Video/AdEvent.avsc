//TODO: This must be compiled aftrer ContentEvent, do the ordering in a more reasonable way
{
  "namespace": "com.oz.segmentio.avro",
  "type": "record",
  "name": "AdEvent",
  "fields": [
    {
      "name": "anonymousId",
      "type": [
        "null",
        "string"
      ],
      "doc": "A pseudo-unique substitute for a User ID, for cases when you don\\’t have an absolutely unique identifier"
    },
    {
      "name": "context",
      "type": [
        "null",
        "Context"
      ],
      "doc": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale."
    },
    {
      "name": "integrations",
      "type": [
        "null",
        {
          "type": "map",
          "values": "boolean"
          //Note: Keys need to be validated elsewhere
        }
      ],
      "doc": "Dictionary of destinations to either enable or disable"
    },
    {
      "name": "messageId",
      "type": [
        "null",
        "string"
      ],
      "doc": "Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API"
    },
    {
      "name": "receivedAt",
      "type": [
        "null",
        "string"
      ],
      "doc": "Automatically set by Segment, the timestamp of when a message is received by Segment. It is an ISO-8601 date string."
    },
    {
      "name": "sentAt",
      "type": [
        "null",
        "string"
      ],
      "doc": "Timestamp of when a message is sent to Segment, used for clock skew correction It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string."
    },
    {
      "name": "timestamp",
      "type": [
        "null",
        "string"
      ],
      "doc": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API. It is an ISO-8601 date string. If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp."
    },
    {
      "name": "type",
      "type": [
        "null",
        "string"
      ],
      "doc": "Type of message, corresponding to the API method: 'identify', 'group', 'track', 'page', 'screen' or 'alias'"
    },
    {
      "name": "userId",
      "type": [
        "null",
        "string"
      ],
      "doc": "Unique identifier for the user in your database. A userId or anonymousId is required."
    },
    {
      "name": "version",
      "type": [
        "null",
        "string"
      ],
      "doc": "Version of the Tracking API that received the message, automatically set by Segment."
    },
    /* ========================= Specific fields start below =================== */
    {
      "name": "event",
      "type": "string"
    },
    {
      "name": "properties",
      "type": {
        "name": "VideoAdProperties",
        "type": "record",
        "fields": [
          {
            "name": "session_id",
            "type": "string",
            "doc": "The unique ID of the overall session used to tie all events generated from a specific playback. This value should be same across all playback, content, and ad events if they are from the same playback session."
          },
          {
            "name": "asset_id",
            "type": "string",
            "doc": "The unique ID of the ad asset."
          },
          {
            "name": "pod_id",
            "type": "string",
            "doc": "The unique ID of the ad pod."
          },
          {
            "name": "pod_position",
            "type": [
              "null",
              "int"
            ],
            "doc": "The position of the ad asset relative to other assets in the same pod."
          },
          {
            "name": "pod_length",
            "type": [
              "null",
              "int"
            ],
            "doc": "The number of ad assets the current ad pod contains."
          },
          {
            "name": "type",
            "type": "AdType",
            "doc": "The ad type. You can send either ‘pre-roll’, ‘mid-roll’, or ‘post-roll"
          },
          {
            "name": "title",
            "type": "string",
            "doc": "The title of the video ad."
          },
          {
            "name": "publisher",
            "type": "string",
            "doc": "The ad creator, author, producer, or publisher."
          },
          {
            "name": "position",
            "type": "int",
            "doc": "The current index position in seconds of the playhead with respect to the length of the ad."
          },
          {
            "name": "total_length",
            "type": "int",
            "doc": "The total duration of the current ad asset in seconds."
          },
          {
            "name": "load_type",
            "type": "AdEventLoadType",
            "doc": "dynamic if ads are loaded dynamically and linear if ads are same for all users."
          },
          {
            "name": "content",
            "type": [
              "null",
              "ContentEvent"
            ],
            "doc": "For video destinations that require content metadata to be sent with ad events, you can send all the content metadata nested under this property (ie. content.asset_id, content.title) as a Content Event Object."
          },
          {
            "name": "quartile",
            "type": [
              "null",
              "int"
            ],
            "doc": "For Video Ad Playing events, this property can be set to indicate when a specific ad quartile has been reached (1,2, or 3). If you are using a Segment client-side library to track your video events you do not need to send this property as our libraries will automatically track quartiles."
          }
        ]
      }
    }
  ]
}

